{"version":3,"file":"formlogger.min.js","sources":["../src/formlogger.js"],"sourcesContent":["/* eslint-disable no-console */\r\ndefine([], function() {\r\n    return {\r\n        init: function() {\r\n            let fieldsetData = {};\r\n\r\n            /**\r\n             * Menambahkan event listener ke elemen form untuk menangkap perubahan nilai input.\r\n             * @param {HTMLFormElement} form\r\n             */\r\n            function attachFieldsetListeners(form) {\r\n                let fieldsetElements = form.querySelectorAll('fieldset input, fieldset select, fieldset textarea');\r\n                fieldsetElements.forEach(element => {\r\n                    if (!element.hasAttribute('data-listener-attached')) {\r\n                        element.addEventListener('input', function() {\r\n                            if (element.name) {\r\n                                fieldsetData[element.name] = element.value;\r\n                            }\r\n                        });\r\n                        element.setAttribute('data-listener-attached', 'true');\r\n                    }\r\n                });\r\n            }\r\n\r\n            /**\r\n             * Mengumpulkan dan mengirim data form ke server melalui fetch atau Beacon API.\r\n             * @param {HTMLFormElement} form\r\n             */\r\n            function logFormData(form) {\r\n                if (!form || form.dataset.loggedOnce) return;\r\n\r\n                form.dataset.loggedOnce = new Date().getTime();\r\n                setTimeout(() => delete form.dataset.loggedOnce, 1000);\r\n\r\n                attachFieldsetListeners(form);\r\n\r\n                let formData = new FormData(form);\r\n                for (let key in fieldsetData) {\r\n                    if (fieldsetData.hasOwnProperty(key) && !formData.has(key)) {\r\n                        formData.append(key, fieldsetData[key]);\r\n                    }\r\n                }\r\n\r\n                formData.append('submitted_at', new Date().toISOString());\r\n                let url = M.cfg.wwwroot + '/local/requestlogger/log.php';\r\n\r\n                if (navigator.sendBeacon) {\r\n                    let blob = new Blob([new URLSearchParams(formData)], {\r\n                        type: 'application/x-www-form-urlencoded'\r\n                    });\r\n                    navigator.sendBeacon(url, blob);\r\n                } else {\r\n                    fetch(url, {\r\n                        method: 'POST',\r\n                        body: formData,\r\n                        credentials: 'same-origin'\r\n                    });\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Menangani semua event form submit dengan metode POST\r\n             */\r\n            document.addEventListener('submit', function(event) {\r\n                let form = event.target;\r\n                if (!form.method || form.method.toLowerCase() !== 'post') return;\r\n                logFormData(form);\r\n            }, true);\r\n\r\n            /**\r\n             * Mengamati elemen form baru yang ditambahkan ke DOM secara dinamis (misalnya via AJAX)\r\n             */\r\n            function observeNewForms() {\r\n                const observer = new MutationObserver(mutations => {\r\n                    mutations.forEach(mutation => {\r\n                        mutation.addedNodes.forEach(node => {\r\n                            if (node.nodeType === 1) {\r\n                                if (node.tagName === 'FORM') {\r\n                                    logFormData(node);\r\n                                } else {\r\n                                    let forms = node.querySelectorAll?.('form') || [];\r\n                                    forms.forEach(form => logFormData(form));\r\n                                }\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n\r\n                observer.observe(document.body, {\r\n                    childList: true,\r\n                    subtree: true\r\n                });\r\n            }\r\n\r\n            // Jalankan observer form AJAX\r\n            observeNewForms();\r\n\r\n            // Catat semua form awal saat halaman pertama kali dimuat\r\n            document.querySelectorAll('form').forEach(form => logFormData(form));\r\n        }\r\n    };\r\n});\r\n"],"names":["define","init","fieldsetData","logFormData","form","dataset","loggedOnce","Date","getTime","setTimeout","querySelectorAll","forEach","element","hasAttribute","addEventListener","name","value","setAttribute","attachFieldsetListeners","formData","FormData","key","hasOwnProperty","has","append","toISOString","url","M","cfg","wwwroot","navigator","sendBeacon","blob","Blob","URLSearchParams","type","fetch","method","body","credentials","document","event","target","toLowerCase","MutationObserver","mutations","mutation","addedNodes","node","nodeType","tagName","observe","childList","subtree"],"mappings":"AACAA,wCAAO,IAAI,iBACA,CACHC,KAAM,eACEC,aAAe,YAwBVC,YAAYC,UACZA,MAAQA,KAAKC,QAAQC,WAAY,OAEtCF,KAAKC,QAAQC,YAAa,IAAIC,MAAOC,UACrCC,YAAW,WAAaL,KAAKC,QAAQC,YAAY,cAtBpBF,MACNA,KAAKM,iBAAiB,sDAC5BC,SAAQC,UAChBA,QAAQC,aAAa,4BACtBD,QAAQE,iBAAiB,SAAS,WAC1BF,QAAQG,OACRb,aAAaU,QAAQG,MAAQH,QAAQI,UAG7CJ,QAAQK,aAAa,yBAA0B,YAevDC,CAAwBd,UAEpBe,SAAW,IAAIC,SAAShB,UACvB,IAAIiB,OAAOnB,aACRA,aAAaoB,eAAeD,OAASF,SAASI,IAAIF,MAClDF,SAASK,OAAOH,IAAKnB,aAAamB,MAI1CF,SAASK,OAAO,gBAAgB,IAAIjB,MAAOkB,mBACvCC,IAAMC,EAAEC,IAAIC,QAAU,kCAEtBC,UAAUC,WAAY,KAClBC,KAAO,IAAIC,KAAK,CAAC,IAAIC,gBAAgBf,WAAY,CACjDgB,KAAM,sCAEVL,UAAUC,WAAWL,IAAKM,WAE1BI,MAAMV,IAAK,CACPW,OAAQ,OACRC,KAAMnB,SACNoB,YAAa,gBAQzBC,SAAS1B,iBAAiB,UAAU,SAAS2B,WACrCrC,KAAOqC,MAAMC,OACZtC,KAAKiC,QAAwC,SAA9BjC,KAAKiC,OAAOM,eAChCxC,YAAYC,SACb,GAMkB,IAAIwC,kBAAiBC,YAClCA,UAAUlC,SAAQmC,WACdA,SAASC,WAAWpC,SAAQqC,UACF,IAAlBA,KAAKC,YACgB,SAAjBD,KAAKE,QACL/C,YAAY6C,UACT,2DACSA,KAAKtC,oFAALsC,KAAwB,UAAW,IACzCrC,SAAQP,MAAQD,YAAYC,kBAO7C+C,QAAQX,SAASF,KAAM,CAC5Bc,WAAW,EACXC,SAAS,IAQjBb,SAAS9B,iBAAiB,QAAQC,SAAQP,MAAQD,YAAYC"}